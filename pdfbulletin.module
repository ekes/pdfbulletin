<?php

/**
 * Implementation of hook_node_info().
 */
function pdfbulletin_node_info() {
  return array(
    'pdfbulletin' => array(
      'name' => t('PDF Bulletin'),
      'module' => 'pdfbulletin',
      'description' => t('Period e-mail newsletter from a view in PDF format'),
      'has_title' => TRUE,
      'title_label' => t('Bulletin name'),
      'has_body' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function pdfbulletin_menu() {
  $items = array();

  $items['admin/settings/pdfbulletin'] = array(
    'title' => 'PDF bulletin',
    'description' => 'Program and default settings for PDF bulletin generation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pdfbulletin_admin_settings_form'),
    'access arguments' => array('administer pdf bulletins'),
    'file' => 'pdfbulletin.admin.inc',
  );

  $items['node/%node/subscribers'] = array(
    'title' => 'Subscribers',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pdfbulletin_subscribers_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'pdfbulletin.pages.inc',
    'weight' => 20,
  );
  $items['node/%node/sendtest'] = array(
    'title' => 'Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pdfbulletin_sendtest_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'pdfbulletin.pages.inc',
    'weight' => 15,
  );
  $items['node/%node/html'] = array(
    'title' => 'HTML test',
    'page callback' => 'pdfbulletin_html_test',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function pdfbulletin_menu_alter(&$items) {
  // we generate a node from the view to go into the bulletin
  // generating one without picking a view first makes no sense.
  $items['node/add/pdfbulletin']['access callback'] = FALSE;
}

/**
 * Implementation of hook_load().
 */
function pdfbulletin_load(&$node) {
  $fields = drupal_schema_fields_sql('pdfbulletin_view');
  $fields_string = implode(', ', $fields); 
  $query = "SELECT $fields_string FROM {pdfbulletin_view} WHERE nid = %d AND vid = %d";
  $result = db_query($query, $node->nid, $node->vid);
  if ($result) {
    $pdfbulletin = db_fetch_object($result);
  }

  $pdfbulletin->subscribers = pdfbulletin_subscribers_load($node->nid);

  $pdfbulletin->args = unserialize($pdfbulletin->args);
  $pdfbulletin->filters = unserialize($pdfbulletin->filters);
  $pdfbulletin->header_safe = check_markup($pdfbulletin->header, $pdfbulletin->header_format);
  $pdfbulletin->footer_safe = check_markup($pdfbulletin->footer, $pdfbulletin->footer_format);
  $pdfbulletin->email_safe = check_markup($pdfbulletin->email, $pdfbulletin->email_format);
  $pdfbulletin->empty_text_safe = check_markup($pdfbulletin->empty_text, $pdfbulletin->empty_text_format);
  $node->pdfbulletin = $pdfbulletin;

  return $pdfbulletin;
}

/**
 * Implementaion of hook_view().
 */
function pdfbulletin_view($node, $teaser = 0, $page = 0) {
  $node = node_prepare($node, $teaser);
  $node->content['pdfbulletin'] = array(
    '#value' => theme('pdfbulletin_node_view', $node, $teaser, $page),
    '#weight' => 0,
  );
  return $node;
}

/** 
 * Implementation of hook_insert().
 */
function pdfbulletin_insert(&$node) {
  $pdfbulletin = $node->pdfbulletin;
  $pdfbulletin->nid = $node->nid;
  $pdfbulletin->vid = $node->vid;
  drupal_write_record('pdfbulletin_view', $pdfbulletin);
}

/**
 * Implementation of hook_update().
 */
function pdfbulletin_update(&$node) {
  /**
   * Not saving directly from node; mainly because of field names
   * legacy. If view wants changing in the future, change it in the 
   * pdfbulletin is probably as good anyway.
   */
  $pdfbulletin = $node->pdfbulletin;
  foreach (array('header', 'footer', 'empty_text', 'email') as $field) {
    $pdfbulletin->{$field} = $node->{$field};
    $pdfbulletin->{$field . '_format'} = $node->{$field . '_format'};
  }
  $pdfbulletin->nid = $node->nid;
  $pdfbulletin->vid = $node->vid;
  $pdfbulletin->paper_size = $node->paper_size;
  $pdfbulletin->css_file = $node->css_file;

  if ($node->revision) {
    drupal_write_record('pdfbulletin_view', $pdfbulletin);
  }
  else {
    drupal_write_record('pdfbulletin_view', $pdfbulletin, array('nid', 'vid'));
  }
}

/**
 * Implementation of hook_delete().
 */
function pdfbulletin_delete(&$node) {
  db_query("DELETE FROM {pdfbulletin_view} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {pdfbulletin_schedule} WHERE nid = %d", $node->nid);
  $job = array(
    'callback' => 'pdfbulletin_send_view',
    'type' => '',
    'id' => $node->nid,
  );
  job_scheduler()->remove($job);
  db_query("DELETE FROM {pdfbulletin_subs} WHERE nid = %d", $node->nid);  
}

/**
 * Implementation of hook_form().
 */
function pdfbulletin_form(&$node, $form_state) {
  module_load_include('inc', 'pdfbulletin', 'pdfbulletin.pages');
  return pdfbulletin_edit_form($node, $form_state);
}

/**
 * Load subscribers array.
 */
function pdfbulletin_subscribers_load($nid) {
  $subscribers = array();

  $query = 'SELECT email FROM {pdfbulletin_subs} WHERE nid = %d';
  $result = db_query($query, $nid);
  while ($row = db_fetch_object($result)) {
    $subscribers[$row->email] = $row->email;
  }

  return $subscribers;
}

/**
 * Save subscribers array.
 */
function pdfbulletin_subscribers_save($nid, $subscribers) {
  db_query('DELETE FROM pdfbulletin_subs WHERE nid = %d', $nid);
  foreach ($subscribers as $subscriber) {
    $record = array('nid' => $nid, 'email' => $subscriber);
    drupal_write_record('pdfbulletin_subs', $record);
  }
}

/**
 * Implementation of hook_theme().
 */
function pdfbulletin_theme($existing, $type, $theme, $path) {
  return array(
    'pdfbulletin_email_html' => array(
      'arguments' => array('pdfbulletin' => NULL, 'html' => NULL, 'header' => NULL, 'footer' => NULL),
      'file' => 'pdfbulletin.theme.inc',
    ),
    'pdfbulletin_email_text' => array(
      'arguments' => array('pdfbulletin' => NULL, 'text' => NULL, 'header' => NULL, 'footer' => NULL),
      'file' => 'pdfbulletin.theme.inc',
    ),
    'pdfbulletin_email_pdf' => array(
      'arguments' => array('pdfbulletin' => NULL, 'html' => NULL, 'header' => NULL, 'footer' => NULL, 'css' => NULL),
      'file' => 'pdfbulletin.theme.inc',
    ),
    'pdfbulletin_generate_pdf_link' => array(
      'arguments' => array('filepath' => NULL, 'pdfbulletin' => NULL),
      'file' => 'pdfbulletin.theme.inc',
    ),
    'pdfbulletin_node_view' => array(
      'arguments' => array('node' => NULL, 'teaser' => FALSE, 'page' => FALSE),
      'file' => 'pdfbulletin.theme.inc',
      'template' => 'pdfbulletin-node-view',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function pdfbulletin_perm() {
  return array(
    'create pdf bulletins', 'edit own pdf bulletins', 'edit any pdf bulletins', 'delete any pdf bulletins', 'delete own pdf bulletins', 'administer pdf bulletins',
  );
}

/**
 * Implementation of hook_access().
 */
function pdfbulletin_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      if (user_access('create pdf bulletins', $account)) {
        return TRUE;
      }
      break;

    case 'update':
      if (user_access('edit any pdf bulletins', $account) || ($account->uid == $node->uid && user_access('edit own pdf bulletin', $account))) {
        return TRUE;
      }
      break;

    case 'break':
      if (user_access('delete any pdf bulletins', $account) || ($account->uid == $node->uid && user_access('delete own pdf bulletin', $account))) {
        return TRUE;
      }
      break;
  }
}

/**
 * Implementation of hook_views_api().
 *
 * @todo; do we need to expose the node fields? Or is the basic node goode enough.
function pdfbulletin_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'pdfbulletin') . '/views',
  );
}
*/

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Remove preview button from node form, it makes no sense. Testing is the only way.
 */
function pdfbulletin_form_pdfbulletin_node_form_alter(&$form, &$form_state) {
  if (isset($form['buttons']['preview'])) {
    unset($form['buttons']['preview']);
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * Add PDF Bulletin submit button to appropriate views.
 * @see pdfbulletin_views_exposed_form_submit().
 */
function pdfbulletin_form_views_exposed_form_alter(&$form, &$form_state) {
  if (user_access('create pdf bulletins')) {
    $form['pdfbulletin_create'] = array(
      '#type' => 'submit',
      '#value' => t('Create PDF bulletin'),
      '#submit' => array('pdfbulletin_views_exposed_form_submit'),
    );
    $form['submit']['#value'] = t('Filter');
  }
}

/**
 * Form submit callback.
 *
 * Saves a new pdf bulletin from a submitted view.
 * @see pdfbulletin_form_views_exposed_form_alter().
 */
function pdfbulletin_views_exposed_form_submit($form, &$form_state) {
  global $user;
  $view =& $form_state['view'];

  $node = new stdClass;
  $node->type = 'pdfbulletin';
  $node->title = ''; // yes we can get away with this
  $node->uid = $user->uid;
  $node->name = $user->name;

  // the settings we need to store from the view
  $pdfbulletin = new stdClass;
  $pdfbulletin->view_name = $view->name;
  $pdfbulletin->display_id = $view->current_display; // @todo check correct value
  $pdfbulletin->args = $view->args;
  $pdfbulletin->filters = $view->exposed_input;
  if (isset($pdfbulletin->filters['op'])) {
    unset($pdfbulletin->filters['op']);
  }
  $node->pdfbulletin = $pdfbulletin;
  node_save($node);

  $destination = '';
  if (isset($_REQUEST['destination'])) {
    $destination = drupal_get_destination();
    unset($_REQUEST['destination']);
  }

  drupal_goto('node/' . $node->nid . '/edit', $destination);
}

/**
 * Implementation of hook_rules_action_info().
 *
 * Actions to be moved into the newsletter module.
 */
function pdfbulletin_rules_action_info() {
  return array(
    'pdfbulletin_send_action' => array(
      'label' => t('Send a PDF bulletin'),
      'arguments' => array(
        'node' => array(
          'type' => 'node',
          'label' => 'PDF Bulletin to send',
        ),
      ),
      'module' => 'PDF Bulletin',
      'help' => t('Send a bulletin'),
    ),
  );
}

function pdfbulletin_send_action($node, $settings) {
  $pdfbulletin = $node->pdfbulletin;
  if (pdfbulletin_generate_bulletin($pdfbulletin)) {
    pdfbulletin_send_email($pdfbulletin, $node);
  }
}

/**
 * Send generated pdfbulletin to subscribers email addreses.
 *
 * @param $pdfbulletin
 *   pdfbulletin object with html and (pdf) file variables set.
 */
function pdfbulletin_send_email($pdfbulletin, &$node) {
  $sender = ''; // @todo sender
  $subject = check_plain($node->title);
  $body = theme('pdfbulletin_email_html', $pdfbulletin, $pdfbulletin->email_safe, $pdfbulletin->header_safe, $pdfbulletin->footer_safe);
  $plaintext = FALSE;
  $headers = array();
  $text = ''; // html2txt $body
  $attachments = array(array(
    'filepath' => $pdfbulletin->file->filepath,
    'filecontent' => 'PDF Bulletin', // @todo from title of view?
    'filename' => $pdfbulletin->file->filename,
    'filemime' => $pdfbulletin->file->filemime,
  ));
  // @todo, just generate the mail, and change the recipient.
  foreach ($pdfbulletin->subscribers as $subscriber) {
    $message = mimemail($sender, $subscriber, $subject, $body, $plaintext, $headers, $text, $attachments); // , $mailkey = '', $send = TRUE)
  }

  return;
}

function pdfbulletin_html_test(&$pdfbulletin) {
  pdfbulletin_generate_bulletin($pdfbulletin);
  $css = url(drupal_get_path('module', 'pdfbulletin') . '/css/' . $pdfbulletin->css_file . '.css', array('absolute' => true));
  print theme('pdfbulletin_email_pdf', $pdfbulletin, $pdfbulletin->html, $pdfbulletin->header_safe, $pdfbulletin->footer_safe, $css);
  die();
}

/**
 * Generate pdf bulletin file.
 *
 * Receives pdf bulletin object by reference and adds:
 *  $html the html output of the bulletin view.
 *  $file a temporary drupal file object containing the themed pdf bulletin.
 *
 * @param $pdfbulletin
 *   PDF Bulletin object.
 */
function pdfbulletin_generate_bulletin(&$pdfbulletin) {
  $shorten = 0; 
  $tmp_file = '';

  do {
    if (!empty($tmp_file)) {
      // previous attempt that was too long.
      unlink($tmp_file);
    }
    $html = pdfbulletin_generate_html($pdfbulletin, $shorten);
    if ($html === FALSE) {
      // empty and do not send empty
      return FALSE;
    }
    $tmp_file = pdfbulletin_generate_pdf($pdfbulletin, $html);
    $shorten++;
  } while (pdfbulletin_pdf_length($tmp_file) > 1 && $shorten < 10);

  if (--$shorten) {
    watchdog('pdfbulletin', 'PDF bulletin @id shortened by @shorten items', array('@id' => $pdfbulletin->id, '@shorten' => $shorten));
  }

  $pdfbulletin->html = $html;
  $pdfbulletin->file = pdfbulletin_save_pdf($pdfbulletin, $tmp_file);
  return TRUE;
}

/**
 * Saves a successful pdf to a drupal temporary files.
 *
 * @param $pdfbulletin
 *   PDF bulletin object.
 * @param $tmp_file
 *   Path to temporary PDF file to add.
 * @return
 *   Drupal file object.
 */
function pdfbulletin_save_pdf($pdfbulletin, $tmp_file) {
  $path = file_create_path('pdfbulletin');
  if (! file_check_directory($path, FILE_CREATE_DIRECTORY)) {
    watchdog('pdfbulletin', 'Unable to create pdfbulletin directory @path', array('@path' => $path), WATCHDOG_ERROR);
    return FALSE;
  }
  $filepath = file_create_filename($pdfbulletin->nid . '.pdf', $path);
  if (! file_move($tmp_file, $filepath)) {
    return FALSE;
  }

  $file = new stdClass();
  $file->filename = basename($filepath);
  $file->filepath = $filepath;
  $file->filemime = 'application/pdf';
  $file->filesize = filesize($filepath);
  $file->uid = 0; // @todo we can have an owner...
  $file->status = FILE_STATUS_TEMPORARY;
  $file->timestamp = time();
  drupal_write_record('files', $file);

  return $file;
}

/**
 * Determine the number of pages of a pdf.
 *
 * @param $file
 *  String filepath of pdf to test.
 * @return
 *  Integer number of pages.
 */
function pdfbulletin_pdf_length($file) {
  $pdfinfo = pdfbulletin_util_settings('pdfinfo');

  $descriptor = array(0 => array('pipe', 'r'), 1 => array('pipe', 'w'), 2 => array('pipe', 'w'));
  
  $cmd = realpath($pdfinfo) . ' ' . $file;
  $descriptor = array(0 => array('pipe', 'r'), 1 => array('pipe', 'w'), 2 => array('pipe', 'w'));
  $process = proc_open($cmd, $descriptor, $pipes, NULL, NULL);
  if (is_resource($process)) {
    $output = stream_get_contents($pipes[1]);
    $error = stream_get_contents($pipes[2]);
    foreach ($pipes as $pipe) {
      fclose($pipe);
    }
    $retval = proc_terminate($process);
  }
  preg_match('/Pages:(.*)/', $output, $matches);
  return (int) $matches[1];
}

/**
 * Generate pdf file of html.
 *
 * The HTML is themed by theme('pdfbulletin_email_pdf') before being turned into
 * the PDF.
 *
 * @param $pdfbulletin
 *   PDF Bulletin object.
 * @param $html
 *   String html to turn into PDF.
 * @return
 *   String path to temporary file location of PDF.
 */
function pdfbulletin_generate_pdf($pdfbulletin, $html) {
  $paper_sizes = pdfbulletin_util_settings('paper_size');
  $paper_size = $paper_sizes[$pdfbulletin->paper_size];
  $css = url(drupal_get_path('module', 'pdfbulletin') . '/css/' . $pdfbulletin->css_file . '.css', array('absolute' => true));
  $page_orientation = pdfbulletin_util_settings('page_orientation');
  $dpi = pdfbulletin_util_settings('dpi');
  $options = pdfbulletin_util_settings('options');
  $wkhtmltopdf = pdfbulletin_util_settings('wkhtmltopdf');
  $html = theme('pdfbulletin_email_pdf', $pdfbulletin, $html, $pdfbulletin->header_safe, $pdfbulletin->footer_safe, $css);
  $title = check_plain($pdfbulletin->title);
  $output_filename = tempnam(file_directory_temp(), 'pdfbulletin');

  $descriptor = array(0 => array('pipe', 'r'), 1 => array('pipe', 'w'), 2 => array('pipe', 'w'));
//  $cmd = realpath($wkhtmltopdf) ." -q $paper_size --orientation $page_orientation --dpi $dpi $options - $output_filename";
  $cmd = realpath($wkhtmltopdf) ." --title '$title' -q $paper_size --orientation $page_orientation --image-dpi 10000 --image-quality 100 $options - $output_filename";
  $process = proc_open($cmd, $descriptor, $pipes, NULL, NULL);

  if (is_resource($process)) {
    fwrite($pipes[0], $html);
    fclose($pipes[0]);

    $output = stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    stream_set_blocking($pipes[2], 0);
    $error = stream_get_contents($pipes[2]);

    if (!empty($error)) {
      watchdog('pdfbulletin', 'Generate PDF wkhtmltopdf error: @error', array('@error' => $error), WATCHDOG_ERROR);
    }
    fclose($pipes[2]);

    $retval = proc_terminate($process);
  }
  return $output_filename;
}

/**
 * Generate HTML from PDF Bulletin view.
 *
 * @param $pdfbulletin
 *  PDF Bulletin object.
 * @param $shorten
 *  (optional) number of rows to remove from default view length.
 * @return
 *  String html of output.
 */
function pdfbulletin_generate_html($pdfbulletin, $shorten = 0) {
  $view = views_get_view($pdfbulletin->view_name);
  if (! $view) { // 
    // @todo what level of access control should we have!? 
    // || !$view->access($pdfbulletin->display_id)) {
    return;
  }
  if (! $view->set_display($pdfbulletin->display_id)) {
    return;
  }
  $view->pdfbulletin = $pdfbulletin;

  // Set filters.
  // I've tried to remove 'exposed' here; but some filters (eg taxonomy)
  // don't work optionally if they are not exposed.
  // Hidden with CSS for now.
  $filters = $view->get_items('filter', $pdfbulletin->display_id);
  foreach ($filters as $name => $filter) {
    if (! empty($pdfbulletin->filters[$name])) {
      $filter['value'] = $pdfbulletin->filters[$name];
      $view->set_item($pdfbulletin->display_id, 'filter', $name, $filter);
    }
  }
  $view->pre_execute($pdfbulletin->args);
  if ($shorten) {
    $view->set_items_per_page($view->pager['items_per_page'] - $shorten);
  }
  $view->pager['use_pager'] = 0; // don't want to see pager */
  $output = $view->display_handler->execute();
  if (! count($view->result)) {
    if ($pdfbulletin->schedule['send_empty']) {
      $output = $pdfbulletin->empty_text_safe;
    }
    else {
      return FALSE;
    }
  }
  $view->post_execute();
  return $output;
}

/**
 * Retrieve available css files.
 */
function pdfbulletin_css() {
  $css_files = file_scan_directory(drupal_get_path('module', 'pdfbulletin') . '/css', '.css');
  $css = array();
  foreach ($css_files as $file) {
    $css[$file->name] = $file->name;
  }
  return $css;
}

/**
 * Module settings.
 * @todo make admin configurable.
 */
function pdfbulletin_util_settings($setting) {
  $settings = array(
    'pdfinfo' => '/usr/bin/pdfinfo',
    'wkhtmltopdf' => '/usr/local/bin/wkhtmltopdf-amd64',
    'paper_size' => array(
      'letter' => '--margin-top 1in --margin-right 1in --margin-bottom 1in --margin-left 1in --page-size letter',
      'half letter' => '--page-width 5.5in --page-height 8.5in',
      'Buyers Guide advert' => '--margin-bottom 1mm --margin-top 0 --margin-left 2mm --margin-right 2mm --page-width 4.8in --page-height 5.25in',
      'a4' => '--page-size a4',
      'a5' => '--page-size a5',
    ),
    'page_orientation' => 'portrait',
    'dpi' => '100000',
    'options' => '',
  );

  return variable_get('pdfbulletin_' . $setting, $settings[$setting]);
}
